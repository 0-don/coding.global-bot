// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  guildId          String             @id @unique
  guildName        String
  lookback         Int                @default(9999)
  MemberGuild      MemberGuild[]
  MemberBump       MemberBump[]
  MemberRole       MemberRole[]
  MemberMessages   MemberMessages[]
  GuildVoiceEvents GuildVoiceEvents[]
  MemberHelper     MemberHelper[]
}

model GuildVoiceEvents {
  id        Int       @id @default(autoincrement())
  memberId  String
  guildId   String
  channelId String
  join      DateTime  @default(now())
  leave     DateTime?

  member Member @relation(fields: [memberId], references: [memberId], onDelete: Cascade)
  guild  Guild  @relation(fields: [guildId], references: [guildId])
}

model Member {
  memberId         String             @id @unique
  username         String
  roles            MemberRole[]
  guilds           MemberGuild[]
  bumps            MemberBump[]
  MemberMessages   MemberMessages[]
  GuildVoiceEvents GuildVoiceEvents[]
  MemberHelper     MemberHelper[]
}

model MemberMessages {
  id        String   @id @default(cuid())
  memberId  String
  guildId   String
  messageId String   @unique
  channelId String
  member    Member   @relation(fields: [memberId], references: [memberId], onDelete: Cascade)
  guild     Guild    @relation(fields: [guildId], references: [guildId])
  createdAt DateTime @default(now())
}

model MemberGuild {
  id       Int     @id @default(autoincrement())
  memberId String
  guildId  String
  status   Boolean
  nickname String?

  moveCounter Int     @default(0) // troll-move-user command
  moving      Boolean @default(false) // troll-move-user command
  moveTimeout Int     @default(0) // troll-move-user command

  warnings Int @default(0) // spamming external links

  gptId   String? // gpt session key
  gptDate DateTime @default(now()) // refresh session every 30 minutes

  muted    Boolean @default(false) // if true, mute on join
  deafened Boolean @default(false) // if true, deafen on join
  lookback Int     @default(9999) // stats looback period

  member Member @relation(fields: [memberId], references: [memberId], onDelete: Cascade)
  guild  Guild  @relation(fields: [guildId], references: [guildId])

  @@unique([memberId, guildId], name: "member_guild")
}

model MemberHelper {
  id Int @id @default(autoincrement())

  memberId String
  guildId  String

  threadId      String?
  threadOwnerId String?

  createdAt DateTime @default(now())

  member Member @relation(fields: [memberId], references: [memberId], onDelete: Cascade)
  guild  Guild  @relation(fields: [guildId], references: [guildId])
}

model MemberRole {
  id       Int    @id @default(autoincrement())
  roleId   String
  guildId  String
  memberId String
  member   Member @relation(fields: [memberId], references: [memberId], onDelete: Cascade)
  guild    Guild  @relation(fields: [guildId], references: [guildId])

  @@unique([memberId, roleId], name: "member_role")
}

model MemberBump {
  id       Int    @id @default(autoincrement())
  memberId String
  guildId  String
  count    Int
  member   Member @relation(fields: [memberId], references: [memberId], onDelete: Cascade)
  guild    Guild  @relation(fields: [guildId], references: [guildId])

  @@unique([memberId, guildId], name: "member_guild")
}
